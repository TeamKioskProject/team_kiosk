name: Flutter Test

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - '**'

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1. 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Flutter 설치
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"

      # 3. 패키지 설치
      - name: Install Dependencies
        run: flutter pub get

      # 4. ImageMagick 설치 (골든 파일 생성에 필요)
      - name: Install ImageMagick (Required for Golden File Creation)
        run: sudo apt-get install -y imagemagick

      # 5. 위젯 테스트 파일 및 골든 파일 생성
      - name: Find or Create Widget and Golden Test Files
        id: find_or_create_tests
        run: |
          echo "🔍 Finding changed widget files..."
          mkdir -p .tmp
          
          # 기본 브랜치가 비어있는 경우를 대비한 안전한 git diff
          git fetch origin
          BASE_REF=${{ github.base_ref || 'main' }}
          
          # 변경된 파일이 없는 경우 빈 파일 생성
          git diff --name-only origin/$BASE_REF..HEAD > .tmp/changed_widgets_raw.txt || true
          
          
          
          # 위젯 파일 필터링
          grep -E "lib/.*\.dart" .tmp/changed_widgets_raw.txt | grep -v "_test.dart" > .tmp/changed_widgets.txt

          # 테스트 파일 생성 루프
          while IFS= read -r widget_file; do
            # 테스트 파일 경로 설정
            test_file="${widget_file/lib/test}"
            test_file="${test_file/.dart/_test.dart}"
            golden_dir="${test_file/test/goldens}"
            
            # 위젯 이름 추출
            widget_name=$(basename "$widget_file" .dart)

            # 테스트 파일 생성
            if [ ! -f "$test_file" ]; then
              echo "📝 Creating test file for $widget_file -> $test_file"
              mkdir -p "$(dirname "$test_file")"
              cat <<EOF > "$test_file"
                import 'dart:io';
                import 'package:flutter_test/flutter_test.dart';
                import 'package:flutter/material.dart';
                import 'package:team_kiosk/main.dart';
                import 'package:team_kiosk/${widget_file#lib/}';

                void main() {
                  setUpAll(() {
                    // Mock 네트워크 이미지
                    httpOverrides();
                  });
                
                  testWidgets('${widget_name} 접근성 및 멀티 해상도 골든 테스트', (WidgetTester tester) async {
                    await tester.pumpWidget(MyApp());
                    
                    // 위젯 로드 테스트
                    expect(find.byType(${widget_name}), findsOneWidget);
                    
                    // 스크린 리더 접근성 테스트
                    final semantics = tester.getSemantics(find.byType(${widget_name}));
                    expect(semantics, isNotNull, reason: '스크린 리더에서 접근할 수 없는 위젯입니다.');
                    
                    // 모든 중요한 요소가 레이블을 가지고 있는지 확인
                    semantics.visitChildren((child) {
                      final hasLabel = child.label != null && child.label.isNotEmpty;
                      expect(hasLabel, isTrue, reason: '모든 중요한 요소는 스크린 리더를 위한 레이블이 있어야 합니다.');
                      return true;
                    });
                    
                    // 여러 해상도에서 테스트
                    final resolutions = [
                      Size(300, 600),
                      Size(375, 812),
                      Size(768, 1024),
                      Size(1024, 1366),
                    ];
                    
                    for (final resolution in resolutions) {
                      tester.binding.window.physicalSizeTestValue = resolution;
                      tester.binding.window.devicePixelRatioTestValue = 2.0;
                      await tester.pumpAndSettle();
                      
                      final goldenFile = '${golden_dir}/${widget_name}_${resolution.width.toInt()}x${resolution.height.toInt()}.png';
                      await expectLater(
                        find.byType(${widget_name}),
                        matchesGoldenFile(goldenFile)
                      );
                    }
                
                    // 해상도 초기화
                    tester.binding.window.clearPhysicalSizeTestValue();
                  });
                }
                
                void httpOverrides() {
                  HttpOverrides.global = _MockHttpOverrides();
                }
                
                class _MockHttpOverrides extends HttpOverrides {
                  @override
                  HttpClient createHttpClient(SecurityContext? context) {
                    final httpClient = super.createHttpClient(context);
                    httpClient.findProxy = (uri) => 'DIRECT';
                    httpClient.badCertificateCallback = (cert, host, port) => true;
                    return httpClient;
                  }
                }
                EOF
              git add "$test_file"
            else
              echo "✅ Test file already exists: $test_file"
            fi
            
            # 골든 파일 디렉토리 생성
            mkdir -p "$golden_dir"
            
            # 기본 골든 파일 생성 (비어 있는 이미지)
            for resolution in 300x600 375x812 768x1024 1024x1366; do
              golden_file="${golden_dir}/${widget_name}_${resolution}.png"
              if [ ! -f "$golden_file" ]; then
                echo "🖼️ Creating empty golden file for $widget_file -> $golden_file"
                convert -size ${resolution} xc:white "$golden_file"
                git add "$golden_file"
              else
                echo "✅ Golden file already exists: $golden_file"
              fi
            done
          done < .tmp/changed_widgets.txt

      # 6. 테스트 실행
      - name: Run Accessibility and Golden Tests
        if: steps.find_or_create_tests.outcome == 'success'
        run: |
          echo "🧪 Running accessibility and multi-resolution golden tests..."
          find test -name "*_test.dart" | while read -r widget_test_file; do
            echo "🧪 Testing $widget_test_file..."
            flutter test "$widget_test_file" || exit 1
          done
          echo "🎉 All accessibility and multi-resolution golden tests passed"
          
      # 7. 골든 파일 업로드
      - name: Upload Golden Files
        if: steps.find_or_create_tests.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: golden-files
          path: goldens/
